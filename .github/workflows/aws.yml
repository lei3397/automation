name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: test

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          - name: Build with Gradle
            run: ./gradlew build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: myrepo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
#    - name: Deploy to App Runner
#        id: deploy-apprunner
#        uses: awslabs/amazon-app-runner-deploy@main
#        with:
#          service: app-runner-image-deploy-service
#          image: ${{ steps.build-image.outputs.image }}
#          access-role-arn: ${{ secrets.ROLE_ARN }}
#          runtime: JAVA_11
#          region: ${{ secrets.AWS_REGION }}
#          cpu : 1
#          memory : 2
#          port: 8080
#          wait-for-service-stability: true
#
#      - name: App Runner output
#        run: echo "App runner output ${{ steps.deploy-apprunner.outputs.service-id }}"
